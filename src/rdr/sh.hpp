struct sSHCoef {
	static int get_idx(int l, int m) { return l * (l + 1) + m; }

	struct sSHChan {
		float mSH[9];

		void zero() {
			::memset(mSH, 0, LENGTHOF_ARRAY(mSH) * sizeof(mSH[0]));
		}

		float operator()(int l, int m) const { return mSH[get_idx(l, m)]; }
		float operator[](int idx) const { return mSH[idx]; }

		void add(sSHChan const& c) {
			for (int i = 0; i < 9; ++i) {
				mSH[i] += c.mSH[i];
			}
		}

		void addScl(sSHChan const& c, float scl) {
			for (int i = 0; i < 9; ++i) {
				mSH[i] += c.mSH[i] * scl;
			}
		}

		void scl(float scl) {
			for (int i = 0; i < 9; ++i) {
				mSH[i] *= scl;
			}
		}

		void prepareCoef(float fX, float fY, float fZ) {
			// Code generated by generator proposed by Sloan
			// in "Efficient Spherical Harmonic Evaluation"
			float fC0, fC1, fS0, fS1, fTmpA, fTmpB, fTmpC;
			float fZ2 = fZ*fZ;

			mSH[0] = 0.2820947917738781f;
			mSH[2] = 0.4886025119029199f*fZ;
			mSH[6] = 0.9461746957575601f*fZ2 + -0.3153915652525201f;
			fC0 = fX;
			fS0 = fY;

			fTmpA = -0.48860251190292f;
			mSH[3] = fTmpA*fC0;
			mSH[1] = fTmpA*fS0;
			fTmpB = -1.092548430592079f*fZ;
			mSH[7] = fTmpB*fC0;
			mSH[5] = fTmpB*fS0;
			fC1 = fX*fC0 - fY*fS0;
			fS1 = fX*fS0 + fY*fC0;

			fTmpC = 0.5462742152960395f;
			mSH[8] = fTmpC*fC1;
			mSH[4] = fTmpC*fS1;
		}

		template <class Archive>
		void serialize(Archive& arc);
	};

public:

	sSHChan mR;
	sSHChan mG;
	sSHChan mB;

public:

	void add(sSHCoef const& c) {
		mR.add(c.mR);
		mG.add(c.mG);
		mB.add(c.mB);
	}

	void addProbeSample(vec3 xyz, float r, float g, float b, float dOmega) {
		sSHChan coef;
		coef.prepareCoef(xyz.x, xyz.y, xyz.z);

		mR.addScl(coef, r * dOmega);
		mG.addScl(coef, g * dOmega);
		mB.addScl(coef, b * dOmega);
	}

	void scl(float scl) {
		mR.scl(scl);
		mG.scl(scl);
		mB.scl(scl);
	}

	void zero() {
		mR.zero();
		mG.zero();
		mB.zero();
	}

	sSHChan const& get_chan(int idx) const {
		switch (idx) {
		case 0: return mR;
		case 1: return mG;
		case 2: return mB;
		}
		throw std::exception("Wrong channel ID");
	}

	template <class Archive>
	void serialize(Archive& arc);
};
